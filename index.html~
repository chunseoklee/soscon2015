<!doctype html>
<html lang="en">

  <head>
    <meta charset="utf-8">

    <title>IoT.js and JerryScript</title>

    <meta name="description" content="IoT.js on SOSCON 2015">
    <meta name="author" content="Chunseok Lee">

    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">

    <link rel="stylesheet" href="css/reveal.css">
    <link rel="stylesheet" href="css/theme/serif.css" id="theme">

    <!-- Code syntax highlighting -->
    <link rel="stylesheet" href="lib/css/zenburn.css">

    <!-- Printing and PDF exports -->
    <script>
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
    </script>

    <style>
      .reveal h1,
      .reveal h2,
      .reveal h3,
      .reveal h4,
      .reveal h5,
      .reveal h6 {
      text-transform: none;
      }
    </style>

    <!--[if lt IE 9]>
        <script src="lib/js/html5shiv.js"></script>
        <![endif]-->
  </head>

  <body>

    <div class="reveal">

      <!-- Any section element inside of this container is displayed as a slide -->

      <div class="slides">
        <section>
          <h2>IoT.js & JerryScript </h2>
           <small><i>-Incarnation of Node.js for IoT devices-</i></small>

          <p>
           Chunseok Lee</br>
               <small>Senior Engineer @Samsung Electronics </small>
          </p>

<<<<<<< HEAD
        <section>
          <h2>IoT.js & JerryScript ?</h2>
          <p> IoT.js : Node.js-like platform for <strong>IoT devices </strong>
          <p> JerryScript : JavaScript engine for <strong>IoT devices</strong>
        </section>


        <section>
          <h2>Please Fork on Github</h2>
          <p> <a href="https://github.com/Samsung/iotjs" target="_blank">https://github.com/Samsung/iotjs </a>
          <p> <a href="https://github.com/Samsung/jerryscript" target="_blank">https://github.com/Samsung/jerryscript </a>
=======

>>>>>>> 430dd9efeea0f4c61b446bb46b12d0d34b394223
        </section>

 <!-- Jerryscript section below-->
        <section>
<<<<<<< HEAD
          <h2>JerryScript</h2>

        </section>

        <section>
          <h2>Why JS in small devices ?</h2>
          <p>
        </section>

        <section>
          <h2>Why JS in small devices ?</h2>
          <p>
        </section>

<!-- IoT.js section below-->
        <section>
          <h2>IoT.js</h2>

=======
          <h2>IoT.js & JerryScript ?</h2>
          <p> IoT.js : Node.js-like platform for <strong>IoT devices </strong>
          <p> JerryScript : JavaScript engine for <strong>IoT devices</strong>
        </section>


        <section>
          <h2>Please Fork on Github</h2>
          <p> <a href="https://github.com/Samsung/iotjs" target="_blank">https://github.com/Samsung/iotjs </a>
          <p> <a href="https://github.com/Samsung/jerryscript" target="_blank">https://github.com/Samsung/jerryscript </a>
>>>>>>> 430dd9efeea0f4c61b446bb46b12d0d34b394223
        </section>

 <!-- Jerryscript section below-->
        <section>
<<<<<<< HEAD
          <h2>Why in Samsung ?</h2>
          <p>
        </section>

        <!-- DEMO section below-->

        <section>
          <h2>Demo</h2>

          <p> Led Toggle(STM32F4) via Web Browser <p>
          <img src="stm32f4.png" width=305>
          <img src="ledindex.png"width=300>
          <p> STM32F4 : 128kb RAM, 1M flash
=======
          <h2>JerryScript</h2>

        </section>

        <section>
          <h2>Why JS in small devices ?</h2>
          <p>
        </section>

        <section>
          <h2>Why JS in small devices ?</h2>
          <p>
>>>>>>> 430dd9efeea0f4c61b446bb46b12d0d34b394223
        </section>

<!-- IoT.js section below-->
        <section>
<<<<<<< HEAD
          <h2>Demo</h2>
          <a href="http://10.251.41.166:8080"  target="_blank">Led Server on STM32F4(nuttx)</a>
          <p>
          <strong>server.js</strong>
          <pre><code class="hljs">
              var http = require('http');
              var server = http.createServer(function(req, res) {
              if (req.url == '/') {
              onIndex(req, res);
              } else if (req.url == '/light') {
              onLight(req, res);
              } else if (req.url == '/toggle') {
              onToggle(req, res);
              }
              });
          </code></pre>

        </section>

         <section>
          <h2>Demo</h2>
          <a href="http://10.251.41.166:8080"  target="_blank">Led Server on STM32F4(nuttx)</a>
          <p>
          <strong>index.html</strong>
          <pre><code class="hljs">
  <script language='javascript'>
    function toggle() {
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.onreadystatechange = function() {
        if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
          updateLight();
        }
      };
      xmlhttp.open("PUT", "toggle", true);
      xmlhttp.send();
    }
    function updateLight() {
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.onreadystatechange = function() {
        if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
          var state = xmlhttp.responseText;
          if (state == 'on') {
            var light = document.getElementById('light');
            light.innerText = 'on';
            light.style.backgroundColor = '#EEEE00';
          } else {
            var light = document.getElementById('light');
            light.innerText = 'off';
            light.style.backgroundColor = '#000000';
          }
        }
      };
      xmlhttp.open("GET", "light", true);
      xmlhttp.send();
    }
  </script>
          </code></pre>

         </section>


         <section>
           <h2>Future Work</h2>
           <p> Smaller size/memory footprint
           <p> Support more devices

         </section>

         <section>
           <h2>Thank You</h2>
           <h2>Q&A ?</h2>

=======
          <h2>IoT.js</h2>

        </section>

        <section>
          <h2>Why in Samsung ?</h2>
          <p>
        </section>

        <!-- DEMO section below-->

        <section>
          <h2>Demo</h2>

          <p> Led Toggle(STM32F4) via Web Browser <p>
          <img src="stm32f4.png" width=305>
          <img src="ledindex.png"width=300>
          <p> STM32F4 : 128kb RAM, 1M flash
        </section>

        <section>
          <h2>Demo</h2>
          <a href="http://10.251.41.166:8080"  target="_blank">Led Server on STM32F4(nuttx)</a>
          <p>
          <strong>server.js</strong>
          <pre><code class="hljs">
              var http = require('http');
              var server = http.createServer(function(req, res) {
              if (req.url == '/') {
              onIndex(req, res);
              } else if (req.url == '/light') {
              onLight(req, res);
              } else if (req.url == '/toggle') {
              onToggle(req, res);
              }
              });
          </code></pre>

        </section>

         <section>
          <h2>Demo</h2>
          <a href="http://10.251.41.166:8080"  target="_blank">Led Server on STM32F4(nuttx)</a>
          <p>
          <strong>index.html</strong>
          <pre><code class="hljs">
  <script language='javascript'>
    function toggle() {
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.onreadystatechange = function() {
        if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
          updateLight();
        }
      };
      xmlhttp.open("PUT", "toggle", true);
      xmlhttp.send();
    }
    function updateLight() {
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.onreadystatechange = function() {
        if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
          var state = xmlhttp.responseText;
          if (state == 'on') {
            var light = document.getElementById('light');
            light.innerText = 'on';
            light.style.backgroundColor = '#EEEE00';
          } else {
            var light = document.getElementById('light');
            light.innerText = 'off';
            light.style.backgroundColor = '#000000';
          }
        }
      };
      xmlhttp.open("GET", "light", true);
      xmlhttp.send();
    }
  </script>
          </code></pre>

         </section>


         <section>
           <h2>Future Work</h2>
           <p> Smaller size/memory footprint
           <p> Support more devices

         </section>

         <section>
           <h2>Thank You</h2>
           <h2>Q&A ?</h2>

>>>>>>> 430dd9efeea0f4c61b446bb46b12d0d34b394223
         </section>



      </div>

    </div>

    <script src="lib/js/head.min.js"></script>
    <script src="js/reveal.js"></script>

    <script>

      // Full list of configuration options available at:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
      controls: true,
      progress: true,
      history: true,
      center: true,

      transition: 'slide', // none/fade/slide/convex/concave/zoom

      // Optional reveal.js plugins
      dependencies: [
      { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
      { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      { src: 'plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() { hljs.initHighlightingOnLoad(); } },
      { src: 'plugin/zoom-js/zoom.js', async: true },
      { src: 'plugin/notes/notes.js', async: true }
      ]
      });

    </script>

  </body>
</html>
